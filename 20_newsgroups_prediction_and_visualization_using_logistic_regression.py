# -*- coding: utf-8 -*-
"""20 Newsgroups Prediction and Visualization using Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFgFfM8b1uo6li0UwF_r-4MABsMnRSKA
"""
#GROUP MEMBERS
#111841-ICS3C
#111033-ICS3C
#111409-ICS3C
#111218-ICS3C

# Commented out IPython magic to ensure Python compatibility.

#importing the libraries to be used in creating and testing the model
import pandas as pd
import seaborn as sns
import numpy as np
import string
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from matplotlib import pyplot as plt
# %matplotlib inline
from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import f1_score,accuracy_score,precision_score,recall_score

#Importing the 20 newsgroup data
from sklearn.datasets import fetch_20newsgroups
trainDataset= fetch_20newsgroups(subset="train",categories=["alt.atheism","sci.space"])
testDataset= fetch_20newsgroups(subset="test", categories=["alt.atheism","sci.space"])
x_trainDataset=trainDataset["data"]
y_trainDataset=trainDataset["target"]
x_testDataset=testDataset['data']
y_testDataset=testDataset['target']

dataframe=pd.DataFrame(x_trainDataset,columns=['mess'])
dataframe['target']=y_trainDataset
dataframe['length']=dataframe['mess'].apply(len)
dataframe.head()

"""Pre-Processing the Text Message

"""

def data_processing(mess):
  no_punctuation=[c for c in mess if c not in string.punctuation]
  no_punctuation=''.join(no_punctuation)
  clean_message=[word for word in no_punctuation.split() if word.lower() not in stopwords.words('english')]
  return clean_message

dataframe['message']=dataframe['mess'].apply(data_processing)

dataframe.drop('mess',axis=1,inplace=True)
dataframe.head()
dataframe['message'].head()

"""Text Vectorization (as we are using raw text)"""

bow_transformer=CountVectorizer(analyzer=text_process).fit(dataframe['message'])
print(len(bow_transformer.vocabulary_))

messages_bow=bow_transformer.transform(dataframe['message'])
print('Sparse Matrix shape is' ,messages_bow.shape)
print('Non-Zero occurrences are ',messages_bow.nnz)

tfidf_transformer=TfidfTransformer().fit(messages_bow)
tfidf_messages=tfidf_transformer.transform(messages_bow)
print(tfidf_messages.shape)

prediction_pipeline=Pipeline([
                              ('bow',CountVectorizer(analyzer=text_process)),
                              ('tfidf',TfidfTransformer()),
                              ('Logistic Regression',LogisticRegression())
])

prediction_pipeline.fit(x_trainDataset,y_trainDataset)

prediction=prediction_pipeline.predict(x_testDataset)

"""Performance Measures"""

print('F1-score: ',metrics.f1_score(y_testDataset,prediction,labels=np.unique(prediction)))
print('Accuracy: ',metrics.accuracy_score(y_testDataset,prediction))
print('Precision Score: ',metrics.precision_score(y_testDataset,prediction))
print('Recall Score: ',metrics.recall_score(y_testDataset,prediction))

"""Data Visualization"""

sns.barplot(x='target',y='length',data=dataframe)

graph=sns.FacetGrid(dataframe,hue='target',height=4,aspect=2)
graph=graph.map(sns.distplot,'length')
plt.legend()